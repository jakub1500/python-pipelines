#!/usr/bin/python3

from kubernetes import client, config
from k8s.pod import Pod
from utils import common
from utils.environment import env
from utils.logger import Logger
import argparse
import os
import sys
import shutil
import json

def setup_env() -> None:
    env["kubernetes"] = {}
    env["kubernetes"]["api"] = client.CoreV1Api()
    env["kubernetes"]["pods"] = []
    env["kubernetes"]["default_namespace"] = "python-pipelines"
    env["kubernetes"]["default_serviceaccount"] = "python-pipelines"
    env["general"] = {}
    env["general"]["script_dir"] = os.path.dirname(os.path.realpath(__file__))
    env["general"]["main_binary"] = os.path.basename(__file__)
    env["general"]["main_dir_name"] = os.path.basename(os.path.normpath(env["general"]["script_dir"]))
    env["general"]["artifacts_dir_name"] = ".artifacts"
    env["general"]["artifacts_path"] = os.path.join(env["general"]["script_dir"], env["general"]["artifacts_dir_name"])
    env["general"]["relocation_target_path"] = "/relocated-pipelines"
    env["general"]["relocated_script_dir"] = f'{env["general"]["relocation_target_path"]}/{env["general"]["main_dir_name"]}'
    env["general"]["relocated_env"] = \
        env["general"]["script_dir"] == env["general"]["relocated_script_dir"]
    env["general"]["secrets"] = []

def is_local_run() -> bool:
    return 'KUBERNETES_SERVICE_HOST' not in os.environ


def prepare_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-relocate",  action="store_true", dest="no_relocate",
                        help="Disable relocation while local-run")
    parser.add_argument("-p", "--parameters", dest="parameters",
                        help="Parameters to be passed for specified job")
    parser.add_argument("-j", "--job-name", dest="job_name", required=True,
                        help="Job selected for execution")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                        help="increase output verbosity")
    return parser.parse_args()

def prepare_job_parameters(input_params):
    parameters = {}
    if input_params is None:
        return parameters
    try:
        parameters = json.loads(input_params)
    except json.decoder.JSONDecodeError as e:
        Logger.error(f"Provided parameters are not in JSON format.\n{input_params}\n{e}")
        sys.exit(1)
    return parameters



if __name__ == "__main__":
    args = prepare_args()

    common.print_banner()

    if is_local_run():
        config.load_kube_config()
    else:
        config.load_incluster_config()

    setup_env()  # setup env must happen after proper config load

    job_parameters = prepare_job_parameters(args.parameters)
    job_name = args.job_name

    if is_local_run() and not args.no_relocate:
        print("""
Running in local environment.
Current pipelines script will be soon relocated to cluster
from within this script will continue.
Keep in mind this mode is inteded to run in development environment.
------------------------------------------------------------------->\n""", flush=True)
        with Pod("pipelines") as pythonPipelines:
            Logger.info("Pipelines pod spawned properly.")
            Logger.info("Relocating pipelines files into spawned pod.")
            pythonPipelines.copy_file_to(f'{env["general"]["script_dir"]}', env["general"]["relocation_target_path"])
            Logger.info("Setting up the requirements for the pipelines.")
            pythonPipelines.exec(f'cd {env["general"]["relocated_script_dir"]} && pip3 install -r requirements.txt', silent=True)
            Logger.info("Requirements satisfied, let the fun begin!")
            Logger.info("Jumping into relocated pipelines...")
            json_string_params = json.dumps(job_parameters).replace("\"", "\\\"")
            pythonPipelines.exec(f'cd {env["general"]["relocated_script_dir"]} && python3 {env["general"]["main_binary"]} -j {job_name} -p "{json_string_params}"')

            # check if any artifacts were created inside relocated pipelines
            relocated_artifacts_path = os.path.join(env["general"]["relocated_script_dir"], env["general"]["artifacts_dir_name"])
            if pythonPipelines.check_is_dir(relocated_artifacts_path):
                if os.path.exists(env["general"]["artifacts_path"]):
                    shutil.rmtree(env["general"]["artifacts_path"])
                os.mkdir(env["general"]["artifacts_path"])
                pythonPipelines.copy_file_from(relocated_artifacts_path, env["general"]["script_dir"])
        sys.exit(0)

    if args.no_relocate:
        if os.path.exists(env["general"]["artifacts_path"]):
            shutil.rmtree(env["general"]["artifacts_path"])
        print("Running in local environment without relocation")

    if os.getenv("JENKINS_HOME") is not None:
        print("Running in Jenkins environment, some env variables:")
        for var in ["POD_LABEL", "BUILD_URL", "WORKSPACE", "JENKINS_URL", "BUILD_NUMBER", "PYTHON_VERSION", "JOB_NAME"]:
            print(f"{var}: {os.getenv(var)}", flush=True)

    from jobs import select_job
    job = select_job(job_name, job_parameters)
    Logger.info(f"Running job '{job_name}' with parameters '{job_parameters}'")
    job.run()
