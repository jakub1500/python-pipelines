#!/usr/bin/python3

from kubernetes import client, config
from k8s.pod import Pod
from utils import common
from utils.environment import env
from utils.logger import Logger
import argparse
import os
import sys
import shutil

def setup_env() -> None:
    env["kubernetes"] = {}
    env["kubernetes"]["api"] = client.CoreV1Api()
    env["kubernetes"]["pods"] = []
    env["kubernetes"]["default_namespace"] = "python-pipelines"
    env["kubernetes"]["default_serviceaccount"] = "python-pipelines"
    env["general"] = {}
    env["general"]["script_dir"] = os.path.dirname(os.path.realpath(__file__))
    env["general"]["main_binary"] = os.path.basename(__file__)
    env["general"]["main_dir_name"] = os.path.basename(os.path.normpath(env["general"]["script_dir"]))
    env["general"]["artifacts_dir_name"] = ".artifacts"
    env["general"]["artifacts_path"] = os.path.join(env["general"]["script_dir"], env["general"]["artifacts_dir_name"])
    env["general"]["relocation_target_path"] = "/relocated-pipelines"
    env["general"]["relocated_script_dir"] = f'{env["general"]["relocation_target_path"]}/{env["general"]["main_dir_name"]}'
    env["general"]["relocated_env"] = \
        env["general"]["script_dir"] == env["general"]["relocated_script_dir"]
    env["general"]["secrets"] = []

def is_local_run() -> bool:
    return 'KUBERNETES_SERVICE_HOST' not in os.environ


def prepare_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-relocate",  action="store_true", dest="no_relocate",
                        help="Disable relocation while local-run")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                        help="increase output verbosity")
    return parser.parse_args()


if __name__ == "__main__":
    args = prepare_args()

    common.print_banner()

    if is_local_run():
        config.load_kube_config()
    else:
        config.load_incluster_config()

    setup_env()  # setup env must happen after proper config load

    if is_local_run() and not args.no_relocate:
        print("""
Running in local environment.
Current pipelines script will be soon relocated to cluster
from within this script will continue.
Keep in mind this mode is inteded to run in development environment.
------------------------------------------------------------------->\n""", flush=True)
        with Pod("pipelines") as pythonPipelines:
            Logger.info("Pipelines pod spawned properly.")
            Logger.info("Relocating pipelines files into spawned pod.")
            pythonPipelines.copy_file_to(f'{env["general"]["script_dir"]}', env["general"]["relocation_target_path"])
            Logger.info("Setting up the requirements for the pipelines.")
            pythonPipelines.exec(f'cd {env["general"]["relocated_script_dir"]} && pip3 install -r requirements.txt', silent=True)
            Logger.info("Requirements satisfied, let the fun begin!")
            Logger.info("Jumping into relocated pipelines...")
            pythonPipelines.exec(f'cd {env["general"]["relocated_script_dir"]} && python3 {env["general"]["main_binary"]}')

            # check if any artifacts were created inside relocated pipelines
            relocated_artifacts_path = os.path.join(env["general"]["relocated_script_dir"], env["general"]["artifacts_dir_name"])
            if pythonPipelines.check_is_dir(relocated_artifacts_path):
                if os.path.exists(env["general"]["artifacts_path"]):
                    shutil.rmtree(env["general"]["artifacts_path"])
                os.mkdir(env["general"]["artifacts_path"])
                pythonPipelines.copy_file_from(relocated_artifacts_path, env["general"]["script_dir"])
        sys.exit(0)

    if args.no_relocate:
        if os.path.exists(env["general"]["artifacts_path"]):
            shutil.rmtree(env["general"]["artifacts_path"])
        print("Running in local environment without relocation")

    if os.getenv("JENKINS_HOME") is not None:
        print("Running in Jenkins environment, some env variables:")
        for var in ["POD_LABEL", "BUILD_URL", "WORKSPACE", "JENKINS_URL", "BUILD_NUMBER", "PYTHON_VERSION", "JOB_NAME"]:
            print(f"{var}: {os.getenv(var)}", flush=True)
        params = {}
        print("Params:", flush=True)
        with open("params.txt", "r") as f_params:
            for line in f_params.readlines():
                key = line.split("=", 1)[0].strip()
                value = line.split("=", 1)[1].strip()
                params[key] = value
        print(params, flush=True)

    with Pod("ubuntu2204") as ubuntu:
        ubuntu.exec("apt update && apt install -y build-essential wget", silent=True)
        ubuntu.exec("wget https://ftp.gnu.org/gnu/bash/bash-5.1.8.tar.gz && tar -xf bash-5.1.8.tar.gz", silent=True)
        ubuntu.exec("cd bash-5.1.8 && ./configure && make")
        output = ubuntu.exec("bash-5.1.8/bash --version")["output"]
        correct_version = True if "GNU bash, version 5.1.8" in output else False
        print(f"Built correct version? {correct_version}")
        sys.exit(0 if correct_version else 1)
